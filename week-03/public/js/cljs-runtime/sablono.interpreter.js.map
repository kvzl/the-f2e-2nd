{"version":3,"sources":["sablono/interpreter.cljc"],"mappings":"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","names":["x__4433__auto__","m__4434__auto__","sablono.interpreter/interpret","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","sablono.interpreter/IInterpreter","this","sablono.interpreter/update-state","component","next-props","property","value","on-change","goog.object/getValueByKeys","next-state","G__34900","G__34901","G__34902","goog.object/extend","goog.object/set","sablono.interpreter/wrap-form-element","element","ctor","props","state","G__34906","G__34907","js/goog.bind","goog.object/get","G__34903","G__34904","G__34905","js/React.Component","js/goog.inherits","x34908","event","temp__5735__auto__","handler","new-props","state-value","element-value","G__34909","G__34910","js/ReactDOM.findDOMNode","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","js/React.createElement","sablono.interpreter/lazy-load-wrappers","sablono.interpreter/wrapped-textarea","sablono.interpreter/wrapped-input","sablono.interpreter/wrapped-checked","sablono.interpreter/wrapped-select","sablono.interpreter/controlled-input?","type","and__4120__auto__","cljs.core/object?","G__34912","sablono.interpreter/element-class","G__34913","G__34914","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","sablono.interpreter/create-element","seq34915","G__34916","cljs.core/first","cljs.core/next","G__34917","self__4717__auto__","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","sablono.interpreter/attributes","attrs","js-attrs","cljs.core/clj->js","sablono.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","sablono.interpreter/interpret-seq","x","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sablono.interpreter/element","vec__34919","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","content","sablono.normalize/element","sablono.interpreter/interpret-vec","sablono.util/element?","G__34922","G__34923","G__34924","cljs.core/PROTOCOL_SENTINEL","G__34925","G__34926","G__34927","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/Cons","cljs.core/LazySeq","cljs.core/List","cljs.core/Subvec","cljs.core/PersistentVector"],"sourcesContent":["(ns sablono.interpreter\n  (:require #?(:clj [om.dom :as dom])\n            #?(:cljs [goog.object :as object])\n            [clojure.string :as str]\n            [clojure.string :refer [blank? join]]\n            [sablono.normalize :as normalize]\n            [sablono.util :as util]))\n\n(defprotocol IInterpreter\n  (interpret [this] \"Interpret a Clojure data structure as a React fn call.\"))\n\n#?(:cljs (defn update-state\n           \"Updates the state of the wrapped input element.\"\n           [component next-props property value]\n           (let [on-change (object/getValueByKeys component \"state\" \"onChange\")\n                 next-state #js {}]\n             (object/extend next-state next-props #js {:onChange on-change})\n             (object/set next-state property value)\n             (.setState component next-state))))\n\n;; A hack to force input elements to always update itself immediately,\n;; without waiting for requestAnimationFrame.\n\n#?(:cljs\n   (defn wrap-form-element [element property]\n     (let [ctor (fn [props]\n                  (this-as this\n                    (set! (.-state this)\n                          (let [state #js {}]\n                            (->> #js {:onChange (goog.bind (object/get this \"onChange\") this)}\n                                 (object/extend state props))\n                            state))\n                    (.call js/React.Component this props)))]\n       (set! (.-displayName ctor) (str \"wrapped-\" element))\n       (goog.inherits ctor js/React.Component)\n       (specify! (.-prototype ctor)\n         Object\n         (onChange [this event]\n           (when-let [handler (.-onChange (.-props this))]\n             (handler event)\n             (update-state\n              this (.-props this) property\n              (object/getValueByKeys event \"target\" property))))\n\n         (componentWillReceiveProps [this new-props]\n           (let [state-value (object/getValueByKeys this \"state\" property)\n                 element-value (object/get (js/ReactDOM.findDOMNode this) property)]\n             ;; On IE, onChange event might come after actual value of\n             ;; an element have changed. We detect this and render\n             ;; element as-is, hoping that next onChange will\n             ;; eventually come and bring our modifications anyways.\n             ;; Ignoring this causes skipped letters in controlled\n             ;; components\n             ;; https://github.com/facebook/react/issues/7027\n             ;; https://github.com/reagent-project/reagent/issues/253\n             ;; https://github.com/tonsky/rum/issues/86\n             ;; TODO: Find a better solution, since this conflicts\n             ;; with controlled/uncontrolled inputs.\n             ;; https://github.com/r0man/sablono/issues/148\n             (if (not= state-value element-value)\n               (update-state this new-props property element-value)\n               (update-state this new-props property (object/get new-props property)))))\n\n         (render [this]\n           (js/React.createElement element (.-state this))))\n       ctor)))\n\n#?(:cljs (def wrapped-input))\n#?(:cljs (def wrapped-checked))\n#?(:cljs (def wrapped-select))\n#?(:cljs (def wrapped-textarea))\n\n#?(:cljs (defn lazy-load-wrappers []\n           (when-not wrapped-textarea\n             (set! wrapped-input (wrap-form-element \"input\" \"value\"))\n             (set! wrapped-checked (wrap-form-element \"input\" \"checked\"))\n             (set! wrapped-select (wrap-form-element \"select\" \"value\"))\n             (set! wrapped-textarea (wrap-form-element \"textarea\" \"value\")))))\n\n(defn ^boolean controlled-input?\n  \"Returns true if `type` and `props` are used a controlled input,\n  otherwise false.\"\n  [type props]\n  #?(:cljs (and (object? props)\n                (case type\n                  \"input\"\n                  (or (exists? (.-checked props))\n                      (exists? (.-value props)))\n                  \"select\"\n                  (exists? (.-value props))\n                  \"textarea\"\n                  (exists? (.-value props))\n                  false))))\n\n#?(:cljs\n   (defn element-class\n     \"Returns either `type` or a wrapped element for controlled\n     inputs.\"\n     [type props]\n     (if (controlled-input? type props)\n       (do (lazy-load-wrappers)\n           (case type\n             \"input\"\n             (case (and (object? props) (.-type props))\n               \"radio\" wrapped-checked\n               \"checkbox\" wrapped-checked\n               wrapped-input)\n             \"select\" wrapped-select\n             \"textarea\" wrapped-textarea\n             type))\n       type)))\n\n(defn create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type props & children]\n  #?(:clj (dom/element\n           {:attrs props\n            :children children\n            :react-key nil\n            :tag type})\n     :cljs (apply js/React.createElement (element-class type props) props children)))\n\n(defn attributes [attrs]\n  #?(:clj (-> (util/html-to-dom-attrs attrs)\n              (update :className #(some->> % (str/join \" \"))))\n     :cljs (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n             (let [class (.-className js-attrs)\n                   class (if (array? class) (join \" \" class) class)]\n               (if (blank? class)\n                 (js-delete js-attrs \"className\")\n                 (set! (.-className js-attrs) class))\n               js-attrs))))\n\n(defn- interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (into [] (map interpret) x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (apply create-element type\n           (attributes attrs)\n           (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(extend-protocol IInterpreter\n\n  #?(:clj clojure.lang.ChunkedCons\n     :cljs cljs.core.ChunkedCons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq\n     :cljs cljs.core.ChunkedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.Cons\n     :cljs cljs.core.Cons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.IndexedSeq\n     :cljs cljs.core.IndexedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.APersistentVector$SubVector\n     :cljs cljs.core.Subvec)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj Object :cljs default)\n  (interpret [this]\n    this)\n\n  nil\n  (interpret [this]\n    nil))\n"]}